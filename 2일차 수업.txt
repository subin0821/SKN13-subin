C;\Doxuments\SKN13\02python -->root directory
C;\Doxuments\SKN13\02python> jupyter lab

*REPL- 바로바로 입력후 출력받을 수 있다.
       - 단계별 처리 가능.
       -ex) 데이터 분석. 각 과정마다 하나씩 확인가능.

*Script- 다 짜놓고 한번에 확인하는것.
        - 프로그램 짤때 주로 사용.
        - 있는 그대로만 출력.(입력한 대로 출력.) ex) print(1+1)은 출력 but, 1+1만 입력하면 출력X.

python -#:주석 --->다음엔 코드 입력 불가.

Launcher---> terminer ----> python python_script.py 입력. ---->실행결과 보여줌.

python - 값 처리.(값을 어떤식으로 처리?, 처리하는 방식은 어떻게 되는지.)
값-data type.(type별로 값을 어떻게 표현하는지.)
변수

모아진 값들을 처리하는 방법. (기본적으로 연산자가 있어야 함.)
연산자-일을 처리하는 방법(기능)을 기호화 해놓은 것. (python에서 미리 만들어놓음)-->정수 타입별로 다름.
함수-우리가 만들어서 쓰는것.(함수를 어떻게 만들어 쓰는가?)
어떻게 일하는지 순서 작성 --->알고리즘.
순서대로 하지는 않고 반복하는 경우도 있음--->제어문(알고리즘을 제어) ->반복,순서대로.

1. data->type->type별 연산자
데이터 하나를 모아 여러개 자료 구조.

프로그램 저장 --> 메모리(RAM)
변수- 메모리에 '값을 저장하기 위한 공간'을 만드는 것.-->값을 저장하는 메모리 공간, 변수=값의 이름.(저장될 값의 의미를 알 수 있는 이름을 지정하면 좋다.(구체적))->식별자.
변수=값. --->하나의 변수는 하나의 값만 넣을 수 있다.
변수명=값.(변수선언)  ex) 나이=30 --->나이라는 이름의 공간을 만들고 거기에 30을 넣는다.
           값을 나중에 넣을 땐 (name=None)

식별자 이름 규칙--> 모든 일반 문자 가능 (주로 영어사용, but, 한글 한자 다 가능)
                            숫자 가능(두번째 글자 부터 가능), 특수 문자 _만 가능
                            이렇게 쓰겠다고 지정해둔 단어-->예약어(변수로사용불가)
                            대문자인것을 소문자로 소문자인것을 대문자로 사용 불가(대소문자 구분)


변수 이름 관례--> 변수 이름은 다 소문자 사용.
                          여러 단어 사용시 단어와 단어 사이를 _로 구분.(스네이크 표기법)
                          
    
값을 동적으로 처리--> 연산자, 함수.(값을 처리해주는 애)

표현식-->값을 표현하는 것(방법).
ex) print()-->표현식X, 구문O
     구문의 결과가 값이면 표현식.
처리한 결과로 값을 아는것이 아니라 그 자체가 값인것을 리터럴(Literal)이라고 표현.--->표현식의 하나!

#변수이름 규칙 연습
a=10 -->a라는 공간을 만들고 10이라는 숫자를 넣어라.
b=20 -->b라는 공간을 만들고 20이라는 숫자를 넣어라.
print() 값+enter 로 출력 ex) print(a) print(b) -->10
                                                                20
                                     print(a,b) -->10 20 30
                                     print(a, b, sep=",") -->10,20
                                     print(a, end ='===')-->10===20
age=10(없던 변수는 #변수생성)
age=30(있는 변수는 #값변경)
변수=값(literal값, 다른변수ex)a=b,연산식ex)a=3+5

여러 변수 동일 한 값 --> a=b=c=30
어러 변수 다른 값 -->a,b,c =10,20,30

x=10
x=x+10-->x+=10(앞의 연산자 먼저 계산 후 대입)
delx -->변수 삭제.

data type - 값을 형태에 따라 종류를 분류한 것.(값마다 처리하는 방식이 다르므로 type이 필요.)
None --> type이자 값 (아무것도 없음을 표현해주는 값)
변수가 있는데 비어있는 것과 변수에 None이 있는 것은 다르다.
변수는 변수 안에 있는 값을 사용하는 것이므로 비어있는 변수는 사용할 수 없다.
age=None #있던 값을 지울때 사용.

# data type 
*숫자-정수(Int)-->10진수, 16진수(ex, 메모리값 표현할때 많이 사용), 8진수
       - 실수(float)-->.찍어서 표현, 지수표기법

*문자(열)(=string)-Str
(0글자 이상)
*논리(bool)(=boolean)-True
                              -False

#정수부에 단위 구분자로 _사용가능.(ex, 500_000_000_000=5000000000) ","는 사용X
10/3 10나누기3
10%3 나머지 연산자
10//3 몫 연산자

python은 모든값을 논리형으로 바꿀 수 있다.
ex) 없다-False
     있다-True
      0   -False
    "하" -True
     " "  -False
   None- False
#bool(값) 값->논리형으로 변환 
*control + / -->주석 단축키

한글자 이상이면 다 True
빈문자만 False
but 공백은 True--> 공백도 글자이므로!


input("이름")-->이름:
name=input("이름:")
이름: 홍길동
name
'홍길동'
input--> 입력의 반환값은 문자열로!

조건이 여러개일 경우 -->논리 연산자 사용.
논리 and 논리 -->둘다 True여야 결과값이 True
논리 or 논리 --->둘중 하나만 True여도 True

x=10
y=10
(x>0)^(y>0) 
x>10 and y>10
(x>100&(y>10) &-->and
^,& 사용시엔 괄호로 묶어 사용.

age=input("나이:") #입력받은 값을 문자열로 반환.
age=int(age) #입력받은 값을 정수로 변환.

문자열 - 0글자도 문자열이다.
*unicode ->2bite 16bite
저장하는 방식(ex)2진수로 바꾸는것) ->encoding

"""세개짜리 따옴표-->여러줄 문자열(문자열 안에 enter가 들어갈때)

키보드에는 있지만 사용하지 못하는 것-->escape 문자(역/)

r string(raw string)
-앞에 r을 붙임.
-escape문자를 사용하지 않고 그대로 표시.

+는 같은 타입만 합칠 수 있다.
ex) 문자열+문자열
 문자열 * 정수 -->같은걸 여러번 합칠때 사용

문자열A in 문자열B --->B문자열 안에 A문자열이 있으면 True 없으면False

len-->글자 수 확인 시 사용.


#문자열 +다른타입-->문자열

문자열 + str()
ex) print ("나이:"+str(age))

첫번째 커서 ctrl 클릭-->멀티 커서
블럭처리 후 ctrl /-->주석처리

집합형태-->변수
변수[식별자 (정수, Str)]
변수를 이용해서 여러개의 값들로 구성된 것.--->지정해서 사용하는 방법-->indexing /slicing
indexing--> 여러개 중에 하나만 가져오는것.(한글자를 지정) --->어떻게 지정하는가?(index지정- 양수 index, 음수 index)
ex)
a=안녕하세요
a[3]
a[-3]
*조회만 가능할 뿐 해당 값을 바꿀 수는 없다.

slicing--> 여러개의 값들을 범위로 지정하는 것.--->값을 모아뒀을 때 사용.
문자열[시작 index : 종료 index]
시작 index~  종료 index-1까지만 가져옴.

간격을 지정하면 간격만큼 띄어서 가져옴,
[시작 index : 종료 index : 간격]
시작과 종료 index생략 가능
1. 0번부터 시작 시 시작 index생략.
2. 끝까지 조회할 경우 종료 index 생략.
3. 간격 생략시 전체 가져옴.
4. 역순으로 가져오기-->s[: : -1] -->역순으로 가져올때는 간격을 반드시 지정해야한다!

1.
name="이순신"
age=30
-info="이름: 이순신, 나이: 30세"
= info="이름: "+name+", 나이: "+str(age)+"세"
{}-->여기 들어갈 값은 나중에 알려줄게

layout="이름:{}, 나이: {}세"
info=layout.format(name, age)
format()-->#{}에 들어갈 값을 순서대로 나열.

2.
%value-->넣는 값의 type을 지정
{}대신 %s,%d,%f,%%

%s--> 모든 문자열(아무type)
%d--> 정수
%f --> 실수-->소수점 이하를 6자리로 맞춰줌.
                -->소수와 관련된 포멧 지정 가능(ex. %.2f-->소수점 두자리까지만 표시해줘.)

info3="이름: %s, 나이: %d" %(name,age)
#"형식 문자열" % (넣어줄 값들)                                                            

3.
f-string
문자열 앞에 f를 붙임 (ex. info=f"이름: {name}, 나이: {age}, 키: {tall}"

문자열 관련 기능(method)
처리할 기능은 같은데 처리해야할 type이 다르면 함수로 제공.
ex. int("20") -->20
     int(3.222) -->3
     int(True)-->1
     int(False)-->0 --->정수로 바꿔줌.

어떤기능이 있는데 문자열에만 필요하다--->문자열의 기능으로만 넣는다. --->메소드(목적은 값처리)
함수는 범용적 값.
메소드는 딱 그 type에만 사용.

연산자-->  +  
함수-->함수이름( , )
메소드--> 처리할 값. 메소드 이름() ->ex. name2, age2 ="유관순", 20
                                                        info2=layout.format(name2, age2) -->처리할 값=layout

url="https://www.naver.com"
url.startswith("https") #url이 "https"로 시작하니?
url.endswith("com") #url이 "com"로 끝나니?
"naver"in url #포함하고 있는지 확인.

정수로 변환
int(value)
실수로 변환
float(value)
문자열로 변환
str(value)
---> type 을 함수로 사용해주면 값을 변환.
int나 float은 문자열을 넣으면 error가 뜸.-->바꿀수 있는 형태의 문자를 넣어야한다.

type(값) -->무슨 type인지 알려줌.
변수에 무슨값이 들어가는 지 모를때 무슨 type인지 확인하기 위해 사용.


python= 동적타입 언어.
변수가 가지는 type을 고정하지 않는다.
#code가 길어지면 마지막에 값이 무엇인지 헷갈림. 나중엔 마지막 type을 찾기가 어려움. error가 날 가능성이 높아짐.--->규모가 커지면 동적타입 언어의 error가 커짐.

#변수: 타입힌트=10
name: str="홍길동"
age:int=30---> error를 낮추기 위해 힌트를 줌(강제성 없음-알려만 줌)

#name:"학생의 이름"="홍길동" --->변수 힌트

한셀에서 셀을 나누고 싶을때 ctrl+shipt+- :커서가 있는 위치를 기준으로 cell을 나눠준다.




#정적 타입 언어
int a=10
a=30.2
a="홍길동" 
--->type이 정해져 있으므로 동적 type언어 때문에 error가 날 가능성이 낮아짐.

