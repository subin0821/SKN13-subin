mark down
#대제목
##중제목
###소제목
jupyter lab에서는 제목에 대해서 index를 생성시켜줌.


code를 묶어주는 것 -> block(대부분은 괄호로 묶지만 python은 들여쓰기로 묶음.)

if num==0: #선언부
    #구현부 (선언부와 구현부는 : 으로 구분)
    print("0입니다.")
    print("zero")
    print("영")
print('종료')

num = 0
if num == 0: print("영입니다.")  #실행 명령어가 하나일 때 ':'옆에 구현가능.
else: print("영아님.")

while문 : 조건에 따라 반복-->조건이 True인 동안 반복. ->False가 될때까지.
for in문 : 여러개 값을 반복 조회가 가능한 것.

반복 프로그램을 끝내려면 끝낼 수 있는 code가 들어가야함.(조건을 바꿔주는)

for in 문 : for 변수 in Iterable:
for in 문에서 쓸 수 있는 것.-> Iterable (ex.문자열, 자료구조->값을 여러개 모아둔것.)
하나의 처리를 모든 값에 일괄적으로 처리하는 반복문-> for in 문
어디서 값을 가져올 것인지를 in 자리에 지정.
값을 하나씩 가져와서 처리
하나의 값을 저장해야하는데 그것을 변수에 지정.
변수->변수를 처리하는 코드

continue : 다음반복 (continue아래를 실행하지 않고 다시 반복)->보통 조건문 안에 들어감.
break : 반복문을 끝내는것,

#변수명'_' 사용하는 경우 : 사용하지 않을 변수인데 문법때문에 넣어야 할 경우.
#range는 정수만 제공(실수는 제공하지 않음)
#enumerate
#zip

#comprehension->반복문과 제어문을 합친 문법
-> for in 문 자체를 list 안에 넣어주는 것. list 안에 있는 것 자체를 comrehension이라고 함.

result3 = [v for v in [1, 2, 3, 4, 5, 6]]
해당 변수 v를 리스트안에 넣어줄때, 

함수-> 값을 처리하는 기능을 만드는것 (값을 처리해서 결과값을 보내주는 것)
=프로그램을 사용할 수 있는 기능
 입력과 출력은 데이터 타입, 값 과 관련이 있다. 제어문과도 관련이 있다.

일할때 필요한 도구를 만들어 두는게 함수를 만드는 것이다.
함수를 만드는것=정의한다
def=함수를 정의한다.
함수를 사용하는것=호출한다(call)

일급시민객체=함수를 값처럼 쓴다.=함수를 변수에 대입할 수 있다.(함수=변수)
->언어에서 제공하는 모든 연산에 그 값을 쓸 수 있다.
코드를 짜서 실행환경에 저장(등록)하는 것 까지의 과정->정의
재 부팅하면 다시 등록해야한다. 메모리는 휘발성이므로.

함수만들거야->선언부
#함수값이 없어도 ()는 무조건 해주기.

함수 실행-> 구현부

argument 전달인자.

'함수이름 규칙 = 식별차 규칙을 따름.
보통 함수이름은 동사형.


이름을 보고 ()가 있으면 함수 없으면 변수


위치에 맞게 넣은것- positional argument
