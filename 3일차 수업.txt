git pull 시작.
conda activate.
jupyter lab

python에서는 camel표기법을 잘 사용하진 않음.
변수를 만들면 무조건 메모리에 생성
변수에 값을 없애고 싶을땐 --->a=None,
변수자체를 없애고 싶을땐 --->del a

Error 이름이 다 있다.
NameError 
어디서 Error가 났는지 왜 났는지에 대한 설명이 나옴.

정수-십진수(_단위구분)
      -8진수(0-n)
      -16진수(0-A-F)

실수-정수.실수부
      -지수 표기법 ex.5e7-->5*10^7

정수-32bit
실수-32bit-->기본적으로 부동소수점 표기법을 사용. 값을 계산하다보면 약간의 오차가 생김. 정밀도를 유지하되 정밀도를 포기하더라도 더큰 데이터 저장 가능.
부동소수점 표기법-->표기를 못하는 숫자들이 생김.

연산자- 나누기 세개, 제곱연산자

python에서는 다른 type도 논리형으로 표현가능.
논리형 값->숫자(True=1 False=0)
값이 없는것은 0 있는것은 1
자료구조=값을 모아둔 것.
0글자의 문자열, 숫자 0, None, 원소가 하나도 없는 자료구조는 False로 변환되고 그 이외는 True로 변환된다.

==,=> --> 한 연산자 띄어쓰기 안함. 띄어쓰기 할 시 각각의 연산자로 인식.

not은 단항연산자(피연산자가 1개)

True일때 결과값 if 조건식 else False일때 결과값
조건식이 True이면 앞의 값을 False이면 뒤의 값을 연산결과로 반환한다.

len("\n")-->1글자.

변수 하나에는 값이 하나만 들어갈 수 있다.

자료구조=한개의 값여러개를 모아서 관리하는 방법->변수 여러개를 묶어둔것.

-list-index(순번)을 가지고 값을 관리하는 것. 순서가 중요함.(순서가 바뀌면 안됨) 순번을 바꾸거나 추가 가능(추가,삭제,변경가능)->삭제 되어도 중간이 비지않음.
-tuple--index(순번)을 가지고 값을 관리하는 것. 변경불가.
-dictionary-이름 값 쌍으로 저장.(값자체가 다름),값에 이름을 지정.
-set-중복되는 값이 들어가지 않게 관리. 개별 데이터를 식별하는 방법이 없음. 중복이 안되게 모으는 것이 목적.
 -->값의 이름이 중요하면 dictionary 값을 순번이 중요하면 list, tuple사용.
 *index는 python실행 환경이 지정.
개별값-->element=원소=성분=요소
자료구조 내의 개별 값의 개수를 알고 싶을 때-->len(자료구조) 함수 사용.
주소-->참조

*중첩리스트
-List가 원소로 List를 가지는 것을 말한다.
-List를 포함한 모든 자료구조 타입들도 다 값이므로 다른 자료구조의 원소로 들어갈 수 있다.
-리스트(자료구조)도 값이다. 그래서 다른 자료구조의 원소로 들어 갈 수 있다.

*자료 구조 메소드-원소변경(추가,삭제)
                         -원소(정보)조회
append-->가장 빈번하게 사용 ---> 여러번에 걸쳐 결과 값을 만들때 리스트를 만들어 놓고 결과값을 추가할 경우 사용.

#정렬- sorted() 함수, sort() list의 메소드
#sorted() 함수 - 모든 자료구조를 받아서 정렬 한 결과를 list로 반환. (원본을 정렬하지 않는다.) 원본을 두고 졍렬한 새로운 결과를 반환.
#sort()메소드 -  list용. List 자체를 정렬. 원본 자체를 변경.

값 변경은 대입!!


tuple과 list의 차이
-tuple은 원소를 바꿀 수 없음(변경,추가,삭제 불가)
ex. 위도 경도 (고정적인 값) - setting 값을 수정하지 못하게 할때.
()사용,()생략 가능.

Dictionary
index가 자동으로 붙지 않고 사용자가 지정해줘야 함. (key가 index역할)
key-value 쌍으로 저장.
식별자로 비슷하게 사용되지만 name은 중복될 수 있지만 key는 중복불가.(같은 key가 없음)
묶은 데이터 하나를 entry또는 item이라고 한다.
중괄호로 묶어줌
:로 구분 
ex. {키:값, 키:값, 키:값}
dict(key=value, key=value)함수 이용.
key는 대부분 문자열로 하지만 숫자로 하기도 한다.(불변의 값들만 사용)->값을 함부로 바꿀 수 없으므로 안전하다고 함.

set
set은 중복을 허용하지 않음.
개별 원소들을 식별할 수 있는 식별자가 없음. --->하나만 조회하는 기능이 없음.
반복문을 이용해 하나씩 가져오는것은 가능하지만 특정의 것을 조회하거나 변경하는 것음 안됨.
중괄호 사용.
값만 나열.
set은 순서를 보장하지 않음.
dectionary는 넣을 때 순서로 들어감.(but, 원래는 순서를 보장하지는 않았음-->순서 보장하지만 원칙적으로는 보장하는 것이 아님.)

Iterable
반복가능한 객체. (반복조회가 가능하다.)
여러개의 값을 요청을 받을 때마다 하나씩 제공해주는 타입을 iterable 이라고 함.
Iterable이 제공하는 값을 반복문을 이용해 조회할 경우 for in문을 사용한다.
대표적으로 자료구조, 문자열 등이 있다.


#제어문은 코드의 알고리즘과 관련(일의 흐름을 제어하는 구문)
프로그램을 만든다=알고리즘을 만드는것
알고리즘=일의 순서 과정(흐름)

*우리말로 코드를 먼저 짜보거나, 튜토리얼을 통해서 다른사람이 짜놓은 코드를 많이 접하는것이 좋다.

조건문=분기문(나누는 기준이 조건)
-->조건에 따라 흐름이 바뀌는 경우 사용.
코드는 흘러가면 끝( 되돌아가는 것은 없음 )

python은 코드작성시에 ()로 묶지 않음.
들여쓰기로 작성.

-조건은 bool 표현식을 기술
-조건선언 다음에 : 으로 선언

