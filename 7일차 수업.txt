*모듈
*패키지
*import(구문)
*API(library)

*여기 안에서만 호출가능. ->script 파일을 만들고 재사용가능한 코드들을 작성하여 저장 (ex. )api.py -->모듈
def test():
	pass

def abc():
	pass

class MyCls:
	pass

print("xxxx")
test()
result = abc()
a = MyCls()
a.xxxx()

모듈을 모은 directory->패키지.=library
파일(모듈) -> 하위 directory( sub directory(패키지)) -> root directory(root package)

import는 사용할 코드가 어디에 있는지 알려줌.


-표준 모듈
파이썬에 내장된 모듈(내장함수는 그냥 쓸 수 있지만 모듈은 import해야함, (ex.import random))
-사용자 정의 모듈
개발자가 재사용을 위해 직접 만든 모듈
-3rd Party 모듈
특정 개발업체나 개발자들이 만들어 배포하는 모듈
사용자 정의 모듈도 배포되어 다른 곳에서 사용되면 3rd party 모듈이 된다.
1st party-프로그램을 만든 사람이 만든것
2st party-사용자가(나) 만든것
3rd party- 위 둘을 제외한 나머지

jupyter lab magic command

a-a1(), a2(), a3()
b-b1(), b2(), b3()
import a
a.a1() -a1을 호출
import a as 가->가라는 별칭( 별칭은 모듈이 길때 축약 또는 이름을 명확하게 하려고 사용하기도 함.)

      root directory :c  
                l
          02_python
          ---- l ---- 
          l           l
mypackage   07-모듈.py

       root directory :c
          ---- l ---- 
          l           l
      Temp    02_python
          
          ---- l ---- 
          l           l
mypackage   07-모듈.py


설치-> pip install 라이브러리[==version]


-코드가 정상적으로 실행되지 않는 상황-> 오류
발생했을때 처리(해결) 안되는 오류 : 메모리가 차서 안되는 경우, 무한 반복으로 인해 발생하는 오류
발생했을때 처리가 되는 오류 : 프로그램 자체의 오류 -->exception

-exception
정상적인 흐름에서 벗어나 다시 다른 경로를 통해 정상흐름으로 돌아올 수 있도록 해주는 것.
->정상화가 목적.

-문제 처리방법
-문제 발생방법

try : 
exception 가능한 코드 입력.
except:
try block을 처리 가능한 코드.

exception이 나는 코드를 연결되어 오류가 나는 부분까지 try로 묶어줌
* 코드가 실행되고 나서 다시 되돌아가서 실행되는 경우는 반복문을 제외한 경우에는 없음. ( 거슬러 올라가는 경로X)

exception 처리한다고 해서 정상적으로 작동하는 것은 X but, 오류가 나는 부분을 넘어가서 나머지 부분은 실행할 수 있도록 유도.(비정상적으로 종료되는 것은 방지)


*Finally block : try except 구문에서 무슨일이 일어나든 '무조건 실행'되어야 하는 구문.

- stack 구조는 first-in last-out 의 구조 먼저 실행한것이 마지막으로 끝나는 구조.
- queue 구조는 first-in first-out 의 구조

        a()               b()              c()
     /    l                 l                 l
a()       b()              c()             except
          l                 l                ㅣ
       return          return           return 

a()->b() ->c()
exception이 나면 exception처리되어 돌아감



ZeroDivisionError ->class
Raise- exception을 상속 받아 사용