while 반복조건
        반복구문
        반복을 끝낼 조건을 변경하는 코드가 들어가야한다.

for in 문 - 하나씩 가져와 일괄처리하는 것을 도와줌,

print를 찍으면  값을 문자열로 바꿔주고 뒤에 엔터를 붙임.
=def print(출력할값, end='\n')

mapping --> 똑같은 기준으로 값을 바꿔주는것.


*가변인자( Var args, Variable length argument) 파라미터
-> 호출한 쪽에서 전달해야하는 값의 개수를 정함. (기본적으로는 함수를 정의하는 쪽에서 정함.)
->argument의 개수가 가변적. parameter입장에서 몇개의 인자가 올지 알 수 없음.
#개수는 정해져 있지 않음. 개수는 호출하는 쪽에서 결정. 특정한 자료구조에 묶어서 주는 것이 아니라 원하는 만큼 나열.
#값을 전달할때 위치기반으로 보낼 수 있지만 키워드 기반으로 보낼 때 받아 줄 수 있는 가변인자도 있음.(**b)
-> 관례적으로 변수명은 *args 를 사용한다. (함수 하나에 하나만 사용하므로,)
-> 관례적으로 변수명은 **kwargs 를 사용한다.( 함수 하나에는 하나만 선언가능.)
-> 하나의 함수에 같이 선언할 경우 위치 가변인자, 키워드 가변인자 순서로 하나씩만 작성할 수 있다.


*변수의 유효범위
- 변수를 사용 할 수 있는 범위.

#전역 범수 : 프로그램 전체에서 사용가능
#지역 범수 : 선언된 함수 안에서만 사용가능한 변수 (다른 함수에서는 사용 할 수 없다.)

name = 20

def test():
    a = 30
    print(a, name)
def test2(par): #parameter : 지역 변수
    print(name)

*함수도 값처럼 사용할 수 있다.
- 값인데 변수에 대입할 수 있는 객체(일급시민 객체)
- return 값으로 함수를 return 할 수 있음.

*람다표현식->함수를 식으로 표현
-처리한 결과를 바로 return 할 수 있어야 한다.
- 표현식이 하나이고 그것을 리턴한다.

*docstring
- 함수를 설명하는것,

#def greet(name:str, age:int=0 - default값 ) -> str :(return 값에 대한 힌트)
힌트일뿐 정해진 규칙은 아님. 권장. 


절차 지향방식은 프로그램을 유지 보수 하기가 어려움.
-> 절차대로 진행하다보니 중간에 새로운 것을 끼워 넣기가 어렵고 프로그램의 규모가 커질 수록 오류가 많아짐. 오류를 찾기도 어려움.

큰걸 작게 만들수는 없으므로 나눠서 진행하는 방식이 객체 지향 방식.

객체지향.
- 관련성 있는 것들을 묶어서 처리하자. -> 하나의데이터 타입
- 어떻게 나눌 것인지 먼저 정해야한다..
- 각각의 항목별로 변수와 함수가 나올것이다.
-변수와 함수를 가지고 있으나 각각의 항목별로 해당 항목과 관련된 것들만 가지고 있음.
attribute - 속성
대부분 속성을 변경하는 함수. 속성을 처리할 수 있는 함수들을 넣어둠.
=> 함수=메소드

메소드는 한 항목과 관련된 속성만 처리하는 함수.

instance (객체) -> 값을 모아둔것(dictionary 와 매우 비슷하지만 각각의 구성을 정해둔것을 객체라고 함.)
                    ->특정 타입에 맞춰놓은 것.


key와 value로 구성되어있는 범용적인 타입의 속성을 가짐 

behavior=메소드

변수 = 클래스이름()->하나의 값

initializer -어떤변수를 가질지를 지정해 주는 것.
-Initializer(생성자)를 통한 추가->실제 값을 추가하는 것은 이것을 이용.
객체에 처음 attribute를 정의한다. 이것을 초기화 라고 한다.
-객체.속성명 = 값 (추가/변경) #변경
-메소드를 통한 추가/변경#변경
2, 3번 방식은 initializer에서 초기화한 attribute를 변경한다.
