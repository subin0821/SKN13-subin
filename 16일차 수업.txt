-폴더 열기 (project root경로)
-파이썬 인터프리터 설정 -->control + shift+ +p
                                  -->python: select interpreter : 
- 터미널(명령프롬프트) 실행 - control + ` / control j

$\cfrac{1}{2}$-->마크다운 latex 문법 넣어 만들때. 1/2

st.write() -->magic mathod

data frame은 data를 보여주기만 하고
data_editor는 수정까지 가능.
table과의 차이는 정렬기능 차이 table은 보여주기만 하고 data frame은 정렬기능이 있음.

text_area : 여러줄 입력받음.

streamlit -> 입력값을 받으면 다시 처음부터 실행. 새로운 작업 실행 시 마다 처음부터 다시 실행. -> 비효율적.
비효율성을 개선하기 위해.-># Cache -> 값을 필요할때마다 읽어들이는것이 아니라 어딘가(메모리)에 저장해두고 불러와서 사용. 
@st.cache_data -->읽어들이는게 data frame일때,(값과 관련된 것들)
@st.cache_resource --> 위에 data를 제외한 나머지. (모델)
--> csv파일을 변경 할 경우 적용이 안됨. (이전에 메모리에 저장된 것을 불러와서 사용하므로)
--> 변경된것을 다시 부르고 싶을 경우 cache를 삭제하고 다시 실행하여야만 적용 됨.
따라서 고정적인 데이터나 고정적인 자원을 읽어들이는 경우에는 cache를 사용하는 것이 효율적이다.


"\n" = "<br>" enter =br

일반버튼: click 하면 True 반환

# 일반적으로 sidebar에는 검색 조건과 같은 사용자 입력 항목들을 넣는다.
radio = select 비슷하지만 radio는 선택할 값을 다 보여주고 선택하는거.


#가상환경
하나의 컴퓨터에서 여러개의 컴퓨터를 사용하는 것 처럼 프로그램을 격리하여 사용할 수 있게 하는 것.

중앙집중식으로 사용 --> conda tool->python 버전을 내맘대로 지정가능
내가 진행하는 프로젝트를 중심으로 -->venv ->내장된 python버전만 사용가능.

conda를 이용해 가상환경 구성
가상환경 생성
conda create -n 
가상환경이름
 python=
설치할파이썬버전
conda create -n my_env python=3.11
설치된 가상환경 목록조회
conda tool은 가상환경을 중앙집중식(한곳에 모아서)으로 관리한다.
 venv는 보통 프로젝트 디렉토리에 가상환경을 만들어 사용한다.
 conda info -e
가상환경 활성화/비활성화
활성화
여러 가상환경중 사용할 가상환경을 선택해 들어가기.
 conda activate 
가상환경이름
conda activate my_env
비활성화
가상환경에서 나가기.
 conda deactivate
가상환경 삭제
conda remove -n 
삭제할가상환경이름
 --all
 conda remove -n my_env --all


<pandas>
표안에서 하나의 행 데이터나 하나의 열 데이터를 표현하는것이 시리즈
표를 표현하는 것이 데이터 프레임 = 시리즈들을 모아놓은것.(행들을 모아놓은것, 열들을 모아놓은것)
차원 = 값이 나열되어있는 방향의 갯수.
1차원은 값이 나열되어있는 방향이 1개
2차원은 값이 나열되어 있는 방향이 2개 (리스트 안에 또 리스트가 있는 경우 (값의 식별자가 2개))
데이터를 분류하는 이유는 분류 기준이 여러개이기 때문. -->표로 나타냄 -->정형 data (값의 위치가 정해져있음)- 값의 분석이 쉬움.
비정형 = 자연어 (음성, 이미지) - 필요한 값을 찾기가 어려움.

SQL ->select 컬럼 / 데이터는 테이블보다 안에 내용이 중요하므로./
데이터 프레임에서 조회할 경우 조회한 결과가 시리즈인 경우가 많음.

리스트나 튜블은 식별자로 index를 붙여줌
dictionary는 각각의 값을 지정하여 식별자를 붙여줌.
pandas가 제공하는 자료구조는 series와 data frame
식별자로 index와 key 값 제공.
key 값은 우리가 볼수 있는 값
index 는 순번.
index이름을 주지 않을 경우 순번=index
벡터화 (연산) -->series의 각각의 값에 연산을 해줌.(개별적으로 계산(비교))
시리즈를 만드는 경우는 많지 않음. 보통은 조회결과가 시리즈인 경우가 많음.
iterable( for v in 문에 in 자리에 넣을 수 있는 것을 말함)

-   index이름: dictionary의 key 역할. Series 생성할 때 지정하지 않으면 양의 index(순번 - 양수 index)이 index 이름이 된다.
-   dtype: 원소들의 데이터타입. numpy(C언어) 타입의 데이터 타입사용. 형태+크기 (int64 -> int: 정수, 64: 1개 값의 메모리 저장 크기 - 64bit)


# Series 객체의 속성
print("Series의 shape:", s1.shape) -->가장 많이 사용하므로 기억해주기!
print("Series의 타입:", s1.dtype)
print("Series의 총원소개수:", s1.size)
print("Series의 index이름 조회:", s1.index)
print("Series의 index이름 조회:", s2.index)

shape와 index 처리해주는 것이 중요! 
pandas에서 object type = 문자열

# index 변경
## 한 번에 변경
s1.index = list("ABCDEFG") --> 개별 변경은 어려움.
s1

indexing= 원소들이 많은데 그중에 하나 조회하는 것. (index는 눈에 보이는 것이 아니라 내부적으로 순번을 지정해 둔것.)
slicing = 범위를 지정하여 그 범위 전체를 조회.

index name은 dictionary의 key값과 유사하지만 dictionary key값은 중복값이 안되지만 index name은 중복이름이 가능.

index로 조회 =iloc[]
index이름으로 조회 =loc[]

*팬시(fancy) 인덱싱** -`Series[index리스트]`
    -   한번에 여러개의 원소를 조회할 경우 조회할 index들을 list로 묶어서 전달한다.
        -   `series[["A", "B", "C"]]`

Series[start index : stop index : step]**
    -   start index 생략 : 0번 부터
    -   stop index
        -   **index 순번일 경우는 포함 하지 않는다.**iloc
        -   **index 명의 경우는 포함한다.**loc

# index연산자 에서 정수로 index를 지정해 slicing할 경우 index(순번) 기준으로 처리된다. but indexing할때는 index name으로 함.

    |&|and연산|
    | | |or연산|
    |~|not 연산|

-   한개의 원소를 조회할 경우
    -   indexing
-   여러개의 원소를 선택해서 조회할 경우
    -   fancy indexing
-   범위로 조회
    -   slicing
-   특정 조건의 원소들을 조회할 경우
    -   boolean indexing