- 하나가 아니라 여러개의 테이블로 데이터가 짜여져 있다면 조회를 했을때 각각의 테이블에서 정보를 가져와 하나의 테이블로 정렬되어 보일 수 있어야함. -->join
- 찾아서 볼때는 합쳐서 보지만 관리는 나눠서 하겠다.
- 데이터를 붙이는 작업은 from절에서 함.
--> from 테이블 -->합친다. -->합치는 기준을 알려주는 것이 join연산자. (아무값이나 들어가지 않도록 조건에 맞춰서 합쳐줌.)-->합쳐져서 만들어진 table-->join table
- 연관성있는 값들 중 연관관계가 같은 것을 가지고 합침.

main 정보를 가지고 있는 table - 소스테이블

조건이 같은 값을 가지고 join 하는 것을 equi join이라고 함
나머지 연산을 하는 것을 non equi join이라고 함. 같지않고 다른 조건을 가지는 것을 말함.
관계는 있지만 부모테이블에 있는 값을 자식테이블이 가지고 있지 않을때 사용.
각각의 값들이 어떤 값을 가지고 있는지 알고 어떤관계인지를 알고 맞는 연산자를 사용해야함.

- where절 에서의 연산자
	- in ex) a in (1, 2, 3) a=1, a=2, a=3
	- 비교연산자 any : 조회된 값들 중 하나만 참이면 참 (where 컬럼 > any(서브쿼리) ) >= 값중 하나만 min연산자와 유사.
	- 비교연산자 all : 조회된 값들 모두와 참이면 참 (where 컬럼 > all(서브쿼리) )>=  max 연산자와 유사.
다중행에서
-- 같다 는 in 같지않다는 not in
-- 크다 작다는 any, all

쿼리문을 실행한 후 실행한 쿼리 문을 다시 쿼리 문 안에 넣어 실행(먼저 실행한 쿼리가 서브쿼리 이후 넣어 처리하는 쿼리는 메인쿼리)
서브쿼리를 실행 할때는 바깥쪽 쿼리문과는 관계없이 처리.

비상관쿼리
서브쿼리가 먼저 실행되고 끝나면 그 결과를 가지고 메인 쿼리를 실행한다.

상관쿼리
메인쿼리가 실행 되는 도중에 메인쿼리가 서브쿼리를 참조하여 같이 실행된다. 메인데이터 갯수만큼 서브쿼리가 실행됨. (서브쿼리가 체크하는 행에 있는 값을 가져다가 비교할때 쓰므로 )

이력테이블 : 사용이력이 남는 테이블 ex)주문내역
고객데이터 => 데이터 테이블

- 테이블 안에 데이터가.
존재하지 않으면 true --> not exist-->끝까지 봤는데 없으면 True return
존재하면 true --> exist

delete - 행삭제
update - 행수정
insert -  행추가 

on delete cascade나 
on delete null 설정이 안되어있으면 지우려고 할때 참조되어 있으면 지워지지 않음.
